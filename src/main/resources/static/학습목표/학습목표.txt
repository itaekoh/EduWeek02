<day1>
	1. welcome.html을 이용한 간단한 MVC모델을 이해한다.
		[브라우저 요청을 controller가 받아 요청을 처리하고 처리된 결과를 model에 담아 html view-template로 전달하는 MVC과정을 이해한다.]
		- template : /template/welcome.html  -> template engine을 이용하기 때문에 template하위에 위치해야 함.
		- controller : WelcomeController
		1) http://localhost:8080/hello?name=itaek&age=30 으로 요청을 보낸다.
		2) WelcomeController가 요청을 받는다. >> @GetMapping("/hello")
		3) 요청한 parameter를 확인한다. - 모든 서버/클라이언트간 주고 받는 장소는 메소드의 인자값(parameter이다)
		4) 요청을 처리한 결과를 model에 담아 클라이언트로 보낼 준비를 한다. >> model.addAttribute("name", name);
		5) view템플릿을 지정하여 전달하면 템플릿엔진이 받아 html을 처리하여 결과를 보여준다.
		
	2. html템플릿을 가지고 직접 회원가입/목록조회 프로그램을 구현한다.
		[DB연동 없이 MVC모델을 이해하기 위한 작업]
		- static : /static/user/form.html <회원가입폼>
		- template : /template/user/list.html <회원목록>
		- controller : UserController
		- DAO : User
		
		1) html template는 trello에서 다운받아 src/main/resources/static에 복사한다.
		2) form.html 의 form action값을 "post"로 바꾼다.
		3) UserController 에서 간단히 브라우저에서 넘어온 값을 출력하여 확인해본다. 
			>> System.out.println("userId = " + userId +", name = " + name + ", email = " + email);
		4) 값이 정상적으로 넘어온 것을 확인 했으면, User라는 DAO를 만들어 값을 보관할 수 있도록 처리한다.
		5) 요청을 처리하고(회원정보를 저장하고) 회원목록을 보여주는 템플릿(/user/list)을 호출해 준다.
			>> 이때 템플릿은 /template디렉토리에 위치해야 하므로, /static/user/list를 /template/user/list로 옮긴다.
			>> mustache syntax를 활용하여 template파일을 수정한다. {{~~}}
		6) 저장된 회원정보를 조회하여 모델에 담아 전달한다.
		7) 전달된 모델을 템플릿엔진에 의해 처리하여 최종결과를 브라우저에 표시한다.
		
	3. QnA게시판의 질문하기 및 목록까지 구현해 본다.
		- static : /static/qna/form.html <qna생성폼>
		- template : /template/index.html <qna목록, Main페이지겸>
		- controller : PostController
		- DAO : Post
		1) 위 회원가입 프로세스와 유사하다.
	
	4. template파일의 중복을 제거한다.
		1) header, navigation, footer 를 별도 파일로(include)분리하고 관리한다.
		2) 분리된 템플릿조립하기 mustache syntax를 이용하여 include하기  {{> /include/header}}	
		3) static을 template로 옮기면 template는 반드시 controller를 필요로 하기 때문에 controller를 구현해야 한다.
	
	5. 소스를 git에 관리하기.
		1) local git관리하기.
			> git init  : local저장소 생성. [.git]
			> git add : 소스추적[index영역관리]
			> git commit -m "comment" : 저장소에 저장
			> git remote add origin $git주소 : 원격 저장소의 위치를 알려줌.[아래 github.com 저장소 생성 후]
		2) github.com 사용하기.
			> 저장소 생성하기 (web ui)
			> 저장소 URL확인 (https://~)
		3) local저장소를 git저장소로 올리기.
			> git push -u origin master : master로 소스올리기.
		4) 참고
			> global환경설정.
			git config -- global user.name "사용자이름"
			git config -- global user.email "email주소"
	
	6. aws서버에 배포하고 서비스 확인하기.
		1) git저장소를 복제(clone)해 온다.
			> git clone $git주소
		2) 복제한 디렉토리에서 빌드/패키징 작업
			> ./mvnw clean : 기존의 target디렉토리를 삭제한다.
			> ./mvnw package : 빌드 및 패키징작업 하여 target디렉토리를 생성한다.
			> ./mvnw clean package : 2가지 명령을 한번에 진행한다. (빌드 및 패키징작업)
		3) 배포.
			> java -jar 생성된.jar &  : 생성된 jar파일을 백그라운드로 실행.
		4) 서비스 확인.
		5) 재 배포
			> 클론 및 빌드 패키징 과정을 거쳐서 기존 프로세스를 kill하고 재 시작하면 된다.
			> kill -9 pid
			> 3)배포 과정 진행.